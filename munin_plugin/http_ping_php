#!/usr/bin/php
<?php
/*##############################
* Author: Rum Coke
* Data  : 2015/06/13
* Ver   : 0.9.1
*##############################*/

/*##############################
* Main Function
################################*/
/* Try Count. */
$ping_data = new PingData();
$TRY = $ping_data->getTry();

/* Warn and Critical.(ms) */
$WARN_RES='1000.0';
$CRITICAL_RES='5000.0';

/* Url */
$URL = $ping_data->getUrl();

/* Label */
$URL_LABEL = $ping_data->getLabel();

/* Exec httping. */
$ArrayResult = array();
$ArrayResult = SendHttpPing($URL,$TRY);

/* Response Check. */
$ArrayAvg = CheckHttpResponse($URL,$ArrayResult);

if( isset($argv[1]))
{
	if ( "$argv[1]" == "autoconf" )
	{
		PrintData('yes');
	       	exit;
	}

	if ( "$argv[1]" == "config" )
	{
		/* Glaph Common */
		PrintData( 'graph_title Http Ping by PHP' );
		PrintData( 'graph_args --base 1000 -l 0' );
		PrintData( 'graph_vlabel response(ms)' );
		PrintData( 'graph_category mytool' );
		PrintData( 'graph_order response time' );
		PrintData( 'graph_scale yes' );
		PrintData( 'graph_printf %6.2lf' );
		PrintData( "graph_order $URL_LABEL[0] $URL_LABEL[1] $URL_LABEL[2]" );

		/* Set Info. */
		for ( $Z = 0; $Z < count($URL); ++$Z )
		{
			PrintData( "$URL_LABEL[$Z].label $URL_LABEL[$Z]" );
			PrintData( "$URL_LABEL[$Z].draw LINE1" );
			PrintData( "$URL_LABEL[$Z].warning $WARN_RES" );
			PrintData( "$URL_LABEL[$Z].critical $CRITICAL_RES" );
			PrintData( "$URL_LABEL[$Z].info Http Response." );
		}
		exit;
	}
}

/* Set Value. */
for ( $Z = 0; $Z < count($URL); ++$Z )
{
	PrintData ( "$URL_LABEL[$Z].value " . $ArrayAvg[$Z]['0'] );
}

exit;

/* Send to HttpPing to URLs. */
function SendHttpPing($URL,$TRY)
{
	/* Error Msg. */
	$ERROR='No valid IPv4 or IPv6 address found for';

	$ArrayResult = array();
	for ( $Z = 0; $Z < count($URL); $Z++ )
	{
		array_push( $ArrayResult , exec( 'httping -c ' . $TRY . ' ' . $URL[$Z] ) );
		if ( $ERROR == $ArrayResult[$Z] )
		{
			$ArrayResult[$Z]='';
		}
	}
	return $ArrayResult;
}

/* Check HttpPing Response. */
function CheckHttpResponse($URL,$ArrayResult)
{
	$ArrayAvg = array();
	
        for ( $Z = 0; $Z < count($URL); $Z++ )
        {
                if ( isset($ArrayResult[$Z]))
		{
			preg_match('/\/[[:digit:]]+.[[:digit:]]?\//' ,  $ArrayResult[$Z] , $data); 
			#array_push( $ArrayAvg ,  str_replace('/' , '' , $data[0] ) );
			array_push( $ArrayAvg ,  str_replace('/' , '' , $data ) );
		}
        }
	return $ArrayAvg;
}

/* Print Data */
function PrintData($Data)
{
	print( $Data . PHP_EOL );
}

/* Use For Ping Command. */
Class PingData
{
	/* Ping Try Count. */
	const TRY_COUNT = 3;

	/* URLs. */
	const URL = array(
	 "http://www.google.co.jp/",
	 "http://www.yahoo.co.jp/",
	 "http://www.msn.com/"
	);

	/* Label for URLs. */
	const URL_LABEL = array(
	 "Google",
	 "Yahoo!",
	 "MSN"
	);

	/* Get Count of Ping Command. */
	public function getTry()
	{
		return self::TRY_COUNT;
	}

	/* Get Array for Url. */
	public function getUrl()
	{
		return self::URL;
	}

	/* Get Array for Urllabel name. */
	public function getLabel()
	{
		return self::URL_LABEL;
	}
}
?>
